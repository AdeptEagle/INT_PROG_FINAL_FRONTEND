{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport { AlertService } from '@app/_services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return of(null).pipe(mergeMap(() => handleRoute()), materialize(), delay(500), dematerialize());\n      // Route dispatcher\n      function handleRoute() {\n        // Account Routes\n        if (url.endsWith('/authenticate') && method === 'POST') return authenticate();\n        if (url.endsWith('/register') && method === 'POST') return register();\n        if (url.endsWith('/email-verification') && method === 'POST') return verifyEmail();\n        // HR Routes\n        if (url.match(/^\\/employees(\\/\\d+)?$/) && ['GET', 'POST', 'PUT', 'DELETE'].includes(method)) {\n          return handleHRRoutes();\n        }\n        if (url.match(/^\\/departments(\\/\\d+)?$/) && ['GET', 'POST', 'PUT', 'DELETE'].includes(method)) {\n          return handleHRRoutes();\n        }\n        // Not found\n        return error('Endpoint not found');\n      }\n      // --- Account-related ---\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email && x.password === password);\n        if (!account) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Email not verified');\n        const token = generateJwtToken(account);\n        return ok({\n          ...basicDetails(account),\n          token\n        });\n      }\n      function register() {\n        const {\n          email\n        } = body;\n        if (accounts.find(x => x.email === email)) {\n          return error(`Email \"${email}\" is already registered`);\n        }\n        const account = {\n          ...body,\n          id: newAccountId(),\n          isVerified: false,\n          verificationToken: new Date().getTime().toString()\n        };\n        accounts.push(account);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => x.verificationToken === token);\n        if (!account) return error('Invalid verification token');\n        account.isVerified = true;\n        return ok();\n      }\n      // --- HR-related ---\n      function handleHRRoutes() {\n        if (!isLoggedIn()) return unauthorized();\n        // Employees\n        if (url === '/employees' && method === 'GET') return ok(employees);\n        if (url === '/employees' && method === 'POST') return createEmployee();\n        if (url.match(/\\/employees\\/\\d+$/) && method === 'PUT') return updateEmployee();\n        if (url.match(/\\/employees\\/\\d+$/) && method === 'DELETE') return deleteEmployee();\n        // Departments\n        if (url === '/departments' && method === 'GET') return ok(departments);\n        if (url === '/departments' && method === 'POST') return createDepartment();\n        if (url.match(/\\/departments\\/\\d+$/) && method === 'PUT') return updateDepartment();\n        if (url.match(/\\/departments\\/\\d+$/) && method === 'DELETE') return deleteDepartment();\n        return error('HR endpoint not found');\n      }\n      function createEmployee() {\n        const employee = {\n          ...body,\n          id: newEmployeeId()\n        };\n        employees.push(employee);\n        return ok(employee);\n      }\n      function updateEmployee() {\n        const id = idFromUrl();\n        const index = employees.findIndex(e => e.id === id);\n        if (index === -1) return error('Employee not found');\n        employees[index] = {\n          ...employees[index],\n          ...body\n        };\n        return ok(employees[index]);\n      }\n      function deleteEmployee() {\n        const id = idFromUrl();\n        employees = employees.filter(e => e.id !== id);\n        return ok();\n      }\n      function createDepartment() {\n        const department = {\n          ...body,\n          id: newDepartmentId()\n        };\n        departments.push(department);\n        return ok(department);\n      }\n      function updateDepartment() {\n        const id = idFromUrl();\n        const index = departments.findIndex(d => d.id === id);\n        if (index === -1) return error('Department not found');\n        departments[index] = {\n          ...departments[index],\n          ...body\n        };\n        return ok(departments[index]);\n      }\n      function deleteDepartment() {\n        const id = idFromUrl();\n        departments = departments.filter(d => d.id !== id);\n        return ok();\n      }\n      // --- Helpers ---\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        AlertService.error(message);\n        return throwError(() => new HttpErrorResponse({\n          status: 400,\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => new HttpErrorResponse({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function isLoggedIn() {\n        return headers.get('Authorization')?.startsWith('Bearer fake-jwt-token');\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          email,\n          firstName,\n          lastName\n        } = account;\n        return {\n          id,\n          email,\n          firstName,\n          lastName\n        };\n      }\n      function generateJwtToken(account) {\n        return `fake-jwt-token.${account.id}`;\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function newEmployeeId() {\n        return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n      }\n      function newDepartmentId() {\n        return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n      }\n    }\n    static #_ = this.ɵfac = function FakeBackendInterceptor_Factory(t) {\n      return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AlertService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FakeBackendInterceptor,\n      factory: FakeBackendInterceptor.ɵfac\n    });\n  }\n  return FakeBackendInterceptor;\n})();\n// --- In-memory Data Stores ---\nlet accounts = [];\nlet employees = [];\nlet departments = [];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}