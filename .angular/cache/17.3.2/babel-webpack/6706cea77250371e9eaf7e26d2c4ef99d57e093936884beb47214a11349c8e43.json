{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const usersKey = 'angular-14-registration-login-example-users';\n      let users = JSON.parse(localStorage.getItem(usersKey)) || [];\n      const authHeader = request.headers.get('Authorization');\n      const isLoggedIn = authHeader?.startsWith('Bearer fake-jwt-token');\n      const roleString = authHeader?.split('.')[1];\n      const role = roleString ? Role[roleString] : null;\n      const employeesKey = 'employees';\n      const departmentsKey = 'departments';\n      const workflowsKey = 'workflows';\n      const requestsKey = 'requests';\n      const employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n      const departments = JSON.parse(localStorage.getItem(departmentsKey)) || [];\n      const workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n      const requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n      return of(null).pipe(mergeMap(() => {\n        // Account routes\n        if (request.url.endsWith('/users/register') && request.method === 'POST') {\n          const user = request.body;\n          if (users.find(x => x.email === user.email)) {\n            return error(`Email \"${user.email}\" is already registered`);\n          }\n          user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n          user.verified = true;\n          user.role = user.role || Role.User;\n          users.push(user);\n          localStorage.setItem(usersKey, JSON.stringify(users));\n          this.alertService.success('Registration successful', {\n            keepAfterRouteChange: true\n          });\n          return ok();\n        }\n        if (request.url.endsWith('/users/authenticate') && request.method === 'POST') {\n          const {\n            email,\n            password\n          } = request.body;\n          const user = users.find(x => x.email === email && x.password === password);\n          if (!user) return error('Email or password is incorrect');\n          if (!user.verified) return error('Account not verified');\n          return ok({\n            ...basicDetails(user),\n            token: `fake-jwt-token.${user.role}`\n          });\n        }\n        if (request.url.endsWith('/users') && request.method === 'GET') {\n          if (!isLoggedIn) return unauthorized();\n          if (role !== Role.Admin) return unauthorized();\n          return ok(users.map(x => basicDetails(x)));\n        }\n        // HR Routes: Employees\n        if (request.url.endsWith('/employees') && request.method === 'GET') {\n          return ok(employees);\n        }\n        if (request.url.endsWith('/employees') && request.method === 'POST') {\n          const newEmployee = request.body;\n          newEmployee.id = employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n          employees.push(newEmployee);\n          localStorage.setItem(employeesKey, JSON.stringify(employees));\n          return ok(newEmployee);\n        }\n        // HR Routes: Departments\n        if (request.url.endsWith('/departments') && request.method === 'GET') {\n          return ok(departments);\n        }\n        if (request.url.endsWith('/departments') && request.method === 'POST') {\n          const newDept = request.body;\n          newDept.id = departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n          departments.push(newDept);\n          localStorage.setItem(departmentsKey, JSON.stringify(departments));\n          return ok(newDept);\n        }\n        // HR Routes: Workflows\n        if (request.url.endsWith('/workflows') && request.method === 'GET') {\n          return ok(workflows);\n        }\n        if (request.url.endsWith('/workflows') && request.method === 'POST') {\n          const newWorkflow = request.body;\n          newWorkflow.id = workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n          workflows.push(newWorkflow);\n          localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n          return ok(newWorkflow);\n        }\n        // HR Routes: Requests\n        if (request.url.endsWith('/requests') && request.method === 'GET') {\n          return ok(requests);\n        }\n        if (request.url.endsWith('/requests') && request.method === 'POST') {\n          const newRequest = request.body;\n          newRequest.id = requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n          requests.push(newRequest);\n          localStorage.setItem(requestsKey, JSON.stringify(requests));\n          return ok(newRequest);\n        }\n        // Pass through other requests\n        return next.handle(request);\n      })).pipe(materialize(), delay(500), dematerialize());\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function basicDetails(user) {\n        const {\n          id,\n          email,\n          firstName,\n          lastName,\n          role\n        } = user;\n        return {\n          id,\n          email,\n          firstName,\n          lastName,\n          role\n        };\n      }\n    }\n    static #_ = this.ɵfac = function FakeBackendInterceptor_Factory(t) {\n      return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FakeBackendInterceptor,\n      factory: FakeBackendInterceptor.ɵfac\n    });\n  }\n  return FakeBackendInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}